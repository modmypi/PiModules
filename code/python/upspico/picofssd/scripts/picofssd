#!/usr/bin/python3

import sys

if (sys.platform == "linux") or (sys.platform == "linux2"):
    pass
else:
    # Replace libraries by fake ones
    import fake_rpi

    sys.modules['RPi'] = fake_rpi.RPi     # Fake RPi
    sys.modules['RPi.GPIO'] = fake_rpi.RPi.GPIO  # Fake GPIO
    sys.modules['smbus'] = fake_rpi.smbus  # Fake smbus (I2C)

from pimodules import configuration
from pimodules.alerts import sendEmail
from pimodules.daemon import Daemon
import RPi.GPIO as GPIO
import socket
import xmltodict
import argparse
import logging.handlers
import logging
import time
import atexit
import signal
import os
from threading import RLock
"""

PiModules(R) UPS PIco file-safe shutdown daemon.

"""


CLOCK_PIN = 27
PULSE_PIN = 22
BOUNCE_TIME = 30


class fssd(Daemon):
    def __init__(self, pidfile, xmlconfig, loglevel=logging.NOTSET):
        Daemon.__init__(self, pidfile)
        self.loglevel = loglevel
        self.log = logging.getLogger(__name__)
        self.log.setLevel(self.loglevel)
        self.log.setLevel(logging.DEBUG)
        if (sys.platform == "linux") or (sys.platform == "linux2"):
            handler = logging.handlers.SysLogHandler(address='/dev/log')
        else:
            handler = logging.StreamHandler(sys.stdout)
        formatter = logging.Formatter('%(module)s[%(process)s]: <%(levelname)s>: %(message)s')
        handler.setFormatter(formatter)
        self.log.addHandler(handler)

        try:
            self.xmlconfig = xmlconfig
            with open(self.xmlconfig, 'rb') as fi:
                self.config = xmltodict.parse(fi)
        except IOError as e:
            self.log.warning(
                "Failed to load XML config file, loading defaults. Alerts will be disabled")
            self.config = xmltodict.parse(configuration.DEFAULT_FSSD_XML_CONFIG)

        self.config = self.config['root']['fssd:config']['fssd:alerts']['fssd:email']
        self.config['fssd:enabled'] = (self.config['fssd:enabled'] == 'True')

        signal.signal(signal.SIGTERM, self.sigcatch)

        self.counter = 0

        # first interrupt on isr pin will start pulse high
        self.sqwave = True
        self.lock = RLock()

    def setup(self):
        """
        GPIO initialisation

        Note: This cannot go in the __init__ method because the unix double-fork in the generic daemon code
        mucks up the initialisation of the GPIO system.

        So it is called in the over-ridden run method.
        """

        GPIO.setmode(GPIO.BCM)
        GPIO.setwarnings(False)
        GPIO.setup(CLOCK_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
        GPIO.setup(PULSE_PIN, GPIO.OUT, initial=self.sqwave)
        GPIO.add_event_detect(CLOCK_PIN, GPIO.FALLING, callback=self.isr, bouncetime=BOUNCE_TIME)

    def isr(self, channel):
        """
        GPIO interrupt service routine
        """
        with self.lock:
            # This test is here because the user *might* have another HAT plugged in or another circuit that produces a
            # falling-edge signal on another GPIO pin.
            if channel != CLOCK_PIN:
                return

            # we can get the state of a pin with GPIO.input even when it is currently configured as an output
            self.sqwave = not GPIO.input(PULSE_PIN)

            # set pulse pin low before changing it to input to look for shutdown signal
            GPIO.output(PULSE_PIN, False)
            GPIO.setup(PULSE_PIN, GPIO.IN, pull_up_down=GPIO.PUD_UP)
            if not GPIO.input(PULSE_PIN):
                # pin is low, this is shutdown signal from pico
                self.counter += 1
                self.log.warning("Lost power supply, Pi will shutdown")
                self.alert_email()
                time.sleep(2)
                os.system('/sbin/shutdown -h now')
            else:
                self.counter = 0

            # change pulse pin back to output with flipped state
            GPIO.setup(PULSE_PIN, GPIO.OUT, initial=self.sqwave)

    def sigcatch(self, signum, frame):
        """
        Signal handler
        """

        if signum == signal.SIGTERM:
            sys.exit(0)

    def cleanup(self):
        """
        GPIO cleanup
        """

        self.log.debug("Cleanup")
        self.log.info("Stopped")
        GPIO.cleanup()

    def alert_email(self):
        # emailserver, username, port, security, fromAddr, toAddr, b64Password, msgSubjectTemplate, msgBodyTemplate
        try:
            if not self.config['fssd:enabled']:
                self.log.debug("Email alert is disabled")
                return True

            sendEmail(self.config['fssd:server'], self.config['fssd:username'], self.config['fssd:port'], self.config['fssd:security'],
                      self.config['fssd:sender-email-address'], self.config['fssd:recipient-email-address'],
                      self.config['fssd:sender-password'], self.config['fssd:subject-template'],
                      self.config['fssd:body-template'])
        except socket.error as e:
            self.log.error(format("Exception in alert_email: %d, %s" % (e.errno, e.strerror)))
        except:
            self.log.error("Unexpected error in alert_email:", sys.exc_info()[0])

    def run(self):
        """
        Super-class overloaded run method.
        """
        self.log.info("Started")
        self.log.debug(self.config['fssd:enabled'])
        self.log.debug(self.config['fssd:server'])
        self.log.debug(self.config['fssd:username'])
        self.log.debug(self.config['fssd:sender-email-address'])
        self.log.debug(self.config['fssd:recipient-email-address'])

        # register function to cleanup at exit
        atexit.register(self.cleanup)

        self.setup()

        while True:
            time.sleep(5)


# parse the command-line
parser = argparse.ArgumentParser()
parser.add_argument('-l', '--log-level', help="Log level, 'info' or 'debug'",
                    default='info', choices=['info', 'debug'])
parser.add_argument("-x", "--xml-config", help="XML config file",
                    default='picofssd.xml', required=True)
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument("-d", "--debug", help="Keep in the foreground, do not daemonize",
                   action="store_true", default=False)
group.add_argument("-p", "--pid-file", help="PID file")
args = parser.parse_args()

sd = fssd(args.pid_file, args.xml_config, {
          'info': logging.INFO, 'debug': logging.DEBUG}[args.log_level])

# the argument to the start method is opposite of debug
sd.start(not args.debug)
